# Copyright 2016, 2021 John Rofrano. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

### -----------------------------------------------------------
###  Modified by DevOps Course Summer 2021 Customer Team 
###  Members:
###     Du, Li | ld2342@nyu.edu | Nanjing | GMT+8
###     Cai, Shuhong | sc8540@nyu.edu | Shanghai | GMT+8
###     Zhang, Teng | tz2179@nyu.edu | Ningbo | GMT+8
###     Zhang, Ken | sz1851@nyu.edu | Shanghai | GMT+8
###     Wang,Yu-Hsing | yw5629@nyu.edu | Taiwan | GMT+8
### -----------------------------------------------------------

"""
Models for Customers module

Models
------
Customer - Users of eCommerce Website

Attributes:
-----------
customer_id (string) - ID of the customer, generated by the database, UNIQUE
first_name (string) - The first name of the customer
last_name (string) - The last name of the customer
user_id (string) - User ID of the customer, generated by the user, UNIQUE
password (string) - Password of the customer, generated by the user 
address_id(int) - ID of the customer's primary address (TODO)
"""

import logging
from flask_sqlalchemy import SQLAlchemy


logger = logging.getLogger("flask.app")
db = SQLAlchemy()


def init_db(app):
    """Initialies the SQLAlchemy app"""
    Customer.init_db(app)


class DataValidationError(Exception):
    """Used for an data validation errors when deserializing"""
    pass


class Customer(db.Model):
    """
    Class that represents a Customer
    This version uses a relational database for persistence which is hidden
    from us by SQLAlchemy's object relational mappings (ORM)
    """
    app = None

    # Table Schema (Attributes)
    customer_id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String(50), nullable=False)
    last_name = db.Column(db.String(50), nullable=False)
    user_id = db.Column(db.String(50), nullable=False, unique=True)
    password = db.Column(db.String(50), nullable=False)
    # active = db.Column(db.Boolean, nullable=False)
    # address_id = db.Column(db.Integer, nullable=True)


    ### -----------------------------------------------------------
    ### INSTANCE METHODS
    ### -----------------------------------------------------------

    def __repr__(self):
        return "<Customer %r %r id=[%s]>" % (self.first_name, self.last_name, self.customer_id)

    def create(self):
        """
        Create a Customer to the database
        """
        logger.info("Creating %s %s", self.first_name, self.last_name)
        self.id = None  # id must be none to generate next primary key
        db.session.add(self)
        db.session.commit()

    def serialize(self):
        """
        Serialize a Customer into a dictionary
        """
        return {
                "customer_id": self.customer_id,
                "first_name": self.first_name,
                "last_name": self.last_name,
                "user_id": self.user_id,
                "password": self.password,
            }

    def deserialize(self, data):
        """
        Deserialize a Customer into a dictionary
        """
        try:
            self.first_name = data['first_name']
            self.last_name = data['last_name']
            self.user_id = data['user_id']
            self.password = data['password']
        except KeyError as error:
            pass
        return self



    ### -----------------------------------------------------------
    ### CLASS METHODS
    ### -----------------------------------------------------------

    @classmethod
    def init_db(cls, app):
        """
        Initializes the database session
        """
        logger.info('Initializing database')
        cls.app = app
        # This is where we initialize SQLAlchemy from the Flask app
        db.init_app(app)
        app.app_context().push()
        db.create_all()  # make our sqlalchemy tables